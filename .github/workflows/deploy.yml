# main 브랜치에 push되면 main 브랜치에서 워크 플로우 실행
on:
  push:
    branches:
      - main


# dummy
# 새 워크플로우 시작시 이전 워크 플로우 취소
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

# 환경변수 - ${{ vars.xxx }} = GitHub 환경 변수
env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}

jobs:
  # 코드 체크아웃 → Java 세팅 → 테스트
  test:
    name: 배포 전 테스트 수행
    runs-on: ubuntu-latest
    # PostgreSQL 테스트용 서비스 컨테이너 설정
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@4
        with:
          fetch-depth: 0

      - name: 마지막 커밋 확인
        run: git log -1 --name-status

      - name: JDK setup
        uses: actions/setup-java@4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: 테스트 수행
        env:
          SPRING_PROFILES_ACTIVE: ci
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass
        run: ./gradlew test

  push_and_deploy:
    name: 이미지 빌드 및 푸시 그리고 ECS를 통한 배포
    needs: test
    runs-on: ubuntu-latest

    # OIDC 권한
    permissions:
      # GitHub Actions의 OIDC 토큰 발급
      id-token: write
      contents: read

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@4

      - name: AWS 자격 증명(OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # 이 역할의 권한으로 AWS 작업 수행
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          # 리소스들의 리전
          aws-region: ${{ env.AWS_REGION }}

      # 1. 이미지 빌드 및 푸시
      - name: Public ECR 로그인
        # 도메인에 로그인
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6
        with:
          # DockerFIle 기준으로 빌드
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY_URI }}:latest
            ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          # 깃헙 액션 저장소에 저장해 둔 Docker build 캐시 불러오기
          cache-from: type=gha
          # 깃헙 액션 저장소에 캐시를 최대한 많이 저장하기
          cache-to: type=gha, mode=max

      # 2. ECS를 통한 배포
      - name: ECS 태스크 정의 실행
        # 해당 스텝의 고유 이름을 render-task-def 로 지정한다
        # 다른 스텝에서 이 스텝의 결과값(outputs)을 참조할 수 있게 된다.
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # a. 원본 설계도 파일
          task-definition: ecs/task-definition.json
          # b. (설계도 파일의 name 속성 값 = 지정한 컨테이너 이름)인 컨테이너 찾기
          container-name: ${{ env.CONTAINER_NAME }}
          # c. image 속성 값을 새로 빌드한 이미지로 동적으로 덮어씌웁니다.
          image: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

      # AWS EC2 기본 배포 전략: 롤링 업데이트 이용해보겠습니다.
      #      - name: 실행 중인 태스크 중지
      #        run: |
      #          aws ecs update-service \
      #            --cluster ${{ vars.ECS_CLUSTER }} \
      #            --service ${{ vars.ECS_SERVICE }} \
      #            --desired-count 0 \
      #            --region ${{ vars.AWS_REGION }}

      - name: ECS 서비스 배포
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # 배포 후 서비스 안정 상태까지 대기
          wait-for-service-stability: true
          # 기존 이미지와 같아도 새로 배포 강제
          force-new-deployment: true
          # 배포 후 태스크 1개 실행
          desired-count: 1







