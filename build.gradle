plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco' // Jacoco -> codecov 를 위해 추가
}

group = 'team03'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

jacoco {
    toolVersion = "0.8.11" // jacoco 버전 명시
}

ext {
    queryDslVersion = "5.1.0"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Lombok
    implementation 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Security
    implementation 'org.springframework.security:spring-security-messaging'

    // AI - Stanford CoreNLP with JAXB exclusions
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation('edu.stanford.nlp:stanford-corenlp:4.5.4') {
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
    }
    implementation('edu.stanford.nlp:stanford-corenlp:4.5.4:models') {
        exclude group: 'javax.xml.bind', module: 'jaxb-api'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
    }
    implementation 'com.github.shin285:KOMORAN:3.3.9'

    // AWS SDK v2를 사용한 요청 서명 라이브러리 (권장)
    implementation 'software.amazon.awssdk:auth'
    implementation 'org.apache.httpcomponents:httpclient' // RestClient가 내부적으로 사용

//    // Elasticsearch Client (로컬용)
//    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
//    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // OpenSearch Client (AWS용)
    implementation 'org.opensearch.client:spring-data-opensearch-starter:1.3.0'
    implementation 'org.opensearch.client:spring-data-opensearch:1.3.0'
    implementation 'org.opensearch.client:opensearch-java:2.10.0'
//    implementation 'org.opensearch.client:opensearch-rest-client:2.8.0'

    // AWS SDK v2 dependencies
    implementation 'software.amazon.awssdk:auth:2.20.+'
    implementation 'software.amazon.awssdk:regions:2.20.+'
    implementation 'software.amazon.awssdk:url-connection-client:2.20.+'  // 이게 중요!

    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.+'

    // Jakarta JAXB - 최신 버전 명시적 추가
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'

    // Monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // AWS S3
    implementation 'software.amazon.awssdk:s3:2.31.7'

    // AWS SDK 1.x (더 간단함)
    implementation 'com.amazonaws:aws-java-sdk-core:1.12.565'
    implementation 'com.amazonaws:aws-java-sdk-opensearch:1.12.565'

    // HTTP Client
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2' // 테스트용

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework:spring-websocket'
    testImplementation 'org.springframework:spring-messaging'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    finalizedBy(tasks.jacocoTestReport)
    useJUnitPlatform()
}

tasks.named('jacocoTestReport') {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

afterEvaluate {
    tasks.jacocoTestReport {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/MoplApplication.class',    // 메인 애플리케이션 클래스
                    '**/Q*',                        // Q 클래스
                    '**/*$*.class',      // Lombok이 생성한 내부 클래스
                    '**/*$*$*.class',    // 중첩된 Lombok 생성 클래스
                    '**/team03/mopl/domain/**/dto/**', // DTO 클래스
                    '**/team03/mopl/domain/**/batch/**', // 배치
                    '**/S3Service.class' // s3 서비스
            ])
        })
    }
}

tasks.withType(JavaExec) {
    jvmArgs = ['-Xmx4g', '-Xms1g']
}

// 충돌 방지를 위해 Elasticsearch 자동설정 제외
configurations {
    all {
        exclude group: 'org.elasticsearch.client'
        exclude group: 'co.elastic.clients'
    }
}
