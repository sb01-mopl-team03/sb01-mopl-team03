services:
  # Spring Boot Backend
  backend:
    container_name: mopl-container
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
#      kafka:
#        condition: service_started
      elasticsearch:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - TZ=Asia/Seoul
      - JVM_OPTS=-Xms256m -Xmx512m
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      # redis
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
#      # kafka
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # elasticsearch
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200

  # Database: PostgreSQL
  db:
    container_name: postgreSQL
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Memory DB: Redis
  redis:
    container_name: redis
    image: redis:7-alpine3.21
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Search Engine: Elasticsearch with Nori (커스텀 이미지)
  elasticsearch:
    container_name: elasticsearch
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - cluster.name=mopl-cluster
      - node.name=mopl-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - TZ=Asia/Seoul
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Message Broker: Kafka (KRaft Mode)
#  kafka:
#    container_name: kafka
#    image: confluentinc/cp-kafka:7.4.10
#    ports:
#      - "9092:9092"
#    restart: always
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#    environment:
#      # 기존 Kafka 설정 그대로 유지
#      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
#      KAFKA_PROCESS_ROLES: broker,controller
#      KAFKA_NODE_ID: 1
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

volumes:
  postgres-data:
  redis_data:
  kafka_data:
  elasticsearch-data:
